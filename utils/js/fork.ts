import { ECPairFactory } from 'ecpair';
import * as bitcoin from 'bitcoinjs-lib';
import { BIP32Factory } from 'bip32';
import * as bip39 from 'bip39';
import * as ecc from 'tiny-secp256k1';
import { createHash } from 'crypto';
import {Signer} from "./bip322-js/dist/index.js";


bitcoin.initEccLib(ecc);
const ECPair = ECPairFactory(ecc);
const bip32 = BIP32Factory(ecc);

// ‚úÖ 1. –ì–µ–Ω–µ—Ä—É—î–º–æ Taproot (P2TR) –∫–ª—é—á—ñ —É Testnet
const mnemonic = "spoon veteran game jungle abandon advice couch soap earth winner match mansion";
const seed2 = bip39.mnemonicToSeedSync(mnemonic);
const hdKey = bip32.fromSeed(seed2, bitcoin.networks.testnet);

// ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Taproot (P2TR) —à–ª—è—Ö: `m/86'/1'/0'/0/0`
const path3 = "m/86'/0'/0'/0/0";  // '1' –æ–∑–Ω–∞—á–∞—î Testnet
const child2 = hdKey.derivePath(path3);

// ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ Taproot-–∞–¥—Ä–µ—Å—É
const { address } = bitcoin.payments.p2tr({
  internalPubkey: Buffer.from(child2.publicKey.slice(1, 33)), // ‚¨Ö –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É Buffer
  network: bitcoin.networks.testnet,
});
console.log(Buffer.from(child2.publicKey.slice(1, 33)).toString('hex'))
const wif3 = child2.toWIF();
console.log("üîπ Taproot Address (Testnet):", address);
console.log("üîπ Private Key (WIF):", wif3);

// ‚úÖ 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ö–µ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (SHA-256)
const message = "Please sign this message to prove ownership of your wallet. Unique code: 6484509866465351";
const messageHash = createHash('sha256').update(message).digest();

// ‚úÖ 3. –ü—ñ–¥–ø–∏—Å—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Schnorr (BIP-340)
const signature = ecc.signSchnorr(messageHash, child2.privateKey);

console.log("üîπ Message Signature (HEX):", Buffer.from(signature).toString("hex"));
console.log("üîπ Message Signature (Base64):", Buffer.from(signature).toString("base64"));

function sign_message_bip322(wif, address, message){
    return Signer.sign(wif, address, message);
}
const sig = sign_message_bip322(wif3, address, messageHash);
console.log(sig)